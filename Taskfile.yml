# Taskfile docs: https://taskfile.dev/
version: '3'

tasks:
  ############################################
  # Client Commands
  ############################################
  npm-install:client:
    desc: 'Run npm install for client'
    aliases:
      - npm-install
    dir: './client'
    sources:
      - ./package.json
    cmds:
      - npm install

  dev:client:
    desc: 'Start react app in dev mode'
    dir: './client'
    interactive: true
    deps:
      - npm-install:client
    cmds:
      - npm run dev

  network:client:
    desc: 'Start react app in network mode'
    dir: './client'
    deps:
      - npm-install:client
    cmds:
      - npm run network

  test:client:
    desc: 'Run vitest for React'
    dir: './client'
    deps:
      - npm-install:client
    cmds:
      - npm run test

  lint:client:
    desc: 'Lint typescript using eslint'
    dir: './client'
    deps:
      - npm-install:client
    cmds:
      - npm run lint

  lint:fix:client:
    desc: 'Fix typescript linting issues with eslint'
    dir: './client'
    deps:
      - npm-install:client
    cmds:
      - npm run lint:fix

  format:client:
    desc: 'Check code formatting rules using prettier'
    dir: './client'
    deps:
      - npm-install:client
    cmds:
      - npm run format

  format:fix:client:
    desc: 'Fix typescript formatting issues with prettier'
    dir: './client'
    deps:
      - npm-install:client
    cmds:
      - npm run format:fix

  ############################################
  # Server Commands
  ############################################
  setup:
    desc: 'Run initial setup for the repo using venv'
    cmds:
      - cp ./sample.env ./.env
      - python3 -m venv ./.venv
      - source ./.venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt && pip install -r requirements.dev.txt

  build:server:
    desc: 'Build docker image if necessary'
    aliases:
      - build
    sources:
      - ./Dockerfile
      - ./requirements*.txt
    run: when_changed
    cmds:
      - docker-compose build

  dev:server:
    desc: 'Run the servers config in dev mode'
    aliases:
      - dev
    deps:
      - build:server
    cmds:
      - docker-compose up

  lint:server:
    desc: 'Lint python using Flake8'
    cmds:
      - docker-compose run --rm app sh -c "flake8"

  format:server:
    desc: 'Check code formatting using Black'
    cmds:
      - docker-compose run --rm app sh -c "black --check . && autoflake --in-place --remove-all-unused-imports --remove-unused-variables --check --quiet --recursive --exclude "migrations" . && isort --check ."

  format:fix:server:
    desc: 'Format code using Black'
    cmds:
      - docker-compose run --rm app sh -c "black . && autoflake --in-place --remove-all-unused-imports --remove-unused-variables --quiet --recursive --exclude "migrations" . && isort ."

  test:server:
    desc: 'Run unit tests'
    aliases:
      - test
    deps:
      - build:server
    cmds:
      - docker-compose run --rm app sh -c "python manage.py test"

  makemigrations:dry-run:
    desc: 'Runs makemigrations command with --dry-run in django'
    deps:
      - build:server
    cmds:
      - docker-compose run --rm app sh -c "python manage.py makemigrations --dry-run"

  makemigrations:
    desc: 'Create migration files if any models have changed'
    deps:
      - build:server
    cmds:
      - docker-compose run --rm app sh -c "python manage.py makemigrations"

  migrate:
    desc: 'Apply migrations to the database.'
    deps:
      - build:server
    cmds:
      - docker-compose run --rm app sh -c "python manage.py migrate"

  down:
    desc: 'Stops all docker containers'
    cmds:
      - docker-compose down

  down:clean:
    desc: 'Stops and removes all docker containers, removes volumes'
    cmds:
      - docker-compose down --remove-orphans -v

  load-data:
    desc: 'Loads in data'
    cmds:
      - docker-compose run --rm app sh -c "python manage.py loaddata fixtures/weatherdata.json"
